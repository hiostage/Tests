"""Fix async support

Revision ID: 7458db68b8c3
Revises: 6193f92b9946
Create Date: 2025-03-31 06:27:17.255592

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '7458db68b8c3'
down_revision = '6193f92b9946'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('users_cache',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('username', sa.String(length=50), nullable=True),
    sa.Column('email', sa.String(length=100), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('last_sync_at', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True, comment='Дата создания записи'),
    sa.Column('updated_at', sa.DateTime(), nullable=True, comment='Дата последнего обновления'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_users_cache_email'), 'users_cache', ['email'], unique=False)
    op.create_index(op.f('ix_users_cache_id'), 'users_cache', ['id'], unique=False)
    op.create_index(op.f('ix_users_cache_username'), 'users_cache', ['username'], unique=False)
    op.drop_index('ix_users_email', table_name='users')
    op.drop_index('ix_users_id', table_name='users')
    op.drop_index('ix_users_username', table_name='users')
    op.drop_table('users')
    op.add_column('group_members', sa.Column('joined_at', sa.DateTime(), nullable=True, comment='Дата вступления'))
    op.add_column('group_members', sa.Column('role', sa.String(length=50), nullable=True, comment='Роль в группе'))
    op.add_column('group_members', sa.Column('is_banned', sa.Boolean(), nullable=True, comment='Забанен ли пользователь'))
    op.alter_column('group_members', 'group_id',
               existing_type=sa.INTEGER(),
               nullable=False,
               comment='ID группы')
    op.alter_column('group_members', 'user_id',
               existing_type=sa.INTEGER(),
               nullable=False,
               comment='ID пользователя')
    op.drop_constraint('group_members_user_id_fkey', 'group_members', type_='foreignkey')
    op.create_foreign_key(None, 'group_members', 'users_cache', ['user_id'], ['id'])
    op.add_column('groups', sa.Column('slug', sa.String(length=120), nullable=True, comment='ЧПУ для URL'))
    op.add_column('groups', sa.Column('updated_at', sa.DateTime(), nullable=True, comment='Дата обновления'))
    op.add_column('groups', sa.Column('is_public', sa.Boolean(), nullable=True, comment='Публичная ли группа'))
    op.add_column('groups', sa.Column('banner_url', sa.String(length=255), nullable=True, comment='URL баннера группы'))
    op.add_column('groups', sa.Column('rules', sa.Text(), nullable=True, comment='Правила группы'))
    op.add_column('groups', sa.Column('tags', sa.JSON(), nullable=True, comment='Теги группы'))
    op.add_column('groups', sa.Column('member_count', sa.Integer(), nullable=True, comment='Количество участников'))
    op.alter_column('groups', 'id',
               existing_type=sa.INTEGER(),
               comment='Уникальный идентификатор',
               existing_nullable=False,
               autoincrement=True)
    op.alter_column('groups', 'name',
               existing_type=sa.VARCHAR(length=100),
               nullable=False,
               comment='Название группы')
    op.alter_column('groups', 'description',
               existing_type=sa.TEXT(),
               comment='Описание группы',
               existing_nullable=True)
    op.alter_column('groups', 'category',
               existing_type=sa.VARCHAR(length=50),
               comment='Категория группы',
               existing_nullable=True)
    op.alter_column('groups', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               comment='Дата создания',
               existing_nullable=True)
    op.alter_column('groups', 'creator_id',
               existing_type=sa.INTEGER(),
               comment='ID создателя',
               existing_nullable=True)
    op.create_index(op.f('ix_groups_category'), 'groups', ['category'], unique=False)
    op.create_index(op.f('ix_groups_created_at'), 'groups', ['created_at'], unique=False)
    op.create_index(op.f('ix_groups_creator_id'), 'groups', ['creator_id'], unique=False)
    op.create_index(op.f('ix_groups_slug'), 'groups', ['slug'], unique=True)
    op.drop_constraint('groups_creator_id_fkey', 'groups', type_='foreignkey')
    op.create_foreign_key(None, 'groups', 'users_cache', ['creator_id'], ['id'])
    op.add_column('posts', sa.Column('is_pinned', sa.Boolean(), nullable=True, comment='Закреплен ли пост'))
    op.add_column('posts', sa.Column('status', sa.String(length=20), nullable=True, comment='Статус поста'))
    op.add_column('posts', sa.Column('tags', sa.JSON(), nullable=True, comment='Теги поста'))
    op.add_column('posts', sa.Column('views_count', sa.Integer(), nullable=True, comment='Количество просмотров'))
    op.add_column('posts', sa.Column('last_activity_at', sa.DateTime(), nullable=True, comment='Последняя активность'))
    op.add_column('posts', sa.Column('edited_by', sa.Integer(), nullable=True, comment='Кто редактировал'))
    op.add_column('posts', sa.Column('edit_reason', sa.String(length=200), nullable=True, comment='Причина редактирования'))
    op.alter_column('posts', 'title',
               existing_type=sa.VARCHAR(length=200),
               nullable=False,
               comment='Заголовок поста')
    op.alter_column('posts', 'content',
               existing_type=sa.TEXT(),
               nullable=False,
               comment='Содержание поста')
    op.alter_column('posts', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               comment='Дата создания',
               existing_nullable=True)
    op.alter_column('posts', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               comment='Дата обновления',
               existing_nullable=True)
    op.alter_column('posts', 'author_id',
               existing_type=sa.INTEGER(),
               comment='ID автора',
               existing_nullable=True)
    op.alter_column('posts', 'group_id',
               existing_type=sa.INTEGER(),
               comment='ID группы',
               existing_nullable=True)
    op.create_index(op.f('ix_posts_author_id'), 'posts', ['author_id'], unique=False)
    op.create_index(op.f('ix_posts_created_at'), 'posts', ['created_at'], unique=False)
    op.create_index(op.f('ix_posts_group_id'), 'posts', ['group_id'], unique=False)
    op.create_index(op.f('ix_posts_status'), 'posts', ['status'], unique=False)
    op.drop_constraint('posts_author_id_fkey', 'posts', type_='foreignkey')
    op.create_foreign_key(None, 'posts', 'users_cache', ['edited_by'], ['id'])
    op.create_foreign_key(None, 'posts', 'users_cache', ['author_id'], ['id'])
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'posts', type_='foreignkey')
    op.drop_constraint(None, 'posts', type_='foreignkey')
    op.create_foreign_key('posts_author_id_fkey', 'posts', 'users', ['author_id'], ['id'])
    op.drop_index(op.f('ix_posts_status'), table_name='posts')
    op.drop_index(op.f('ix_posts_group_id'), table_name='posts')
    op.drop_index(op.f('ix_posts_created_at'), table_name='posts')
    op.drop_index(op.f('ix_posts_author_id'), table_name='posts')
    op.alter_column('posts', 'group_id',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='ID группы',
               existing_nullable=True)
    op.alter_column('posts', 'author_id',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='ID автора',
               existing_nullable=True)
    op.alter_column('posts', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               comment=None,
               existing_comment='Дата обновления',
               existing_nullable=True)
    op.alter_column('posts', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               comment=None,
               existing_comment='Дата создания',
               existing_nullable=True)
    op.alter_column('posts', 'content',
               existing_type=sa.TEXT(),
               nullable=True,
               comment=None,
               existing_comment='Содержание поста')
    op.alter_column('posts', 'title',
               existing_type=sa.VARCHAR(length=200),
               nullable=True,
               comment=None,
               existing_comment='Заголовок поста')
    op.drop_column('posts', 'edit_reason')
    op.drop_column('posts', 'edited_by')
    op.drop_column('posts', 'last_activity_at')
    op.drop_column('posts', 'views_count')
    op.drop_column('posts', 'tags')
    op.drop_column('posts', 'status')
    op.drop_column('posts', 'is_pinned')
    op.drop_constraint(None, 'groups', type_='foreignkey')
    op.create_foreign_key('groups_creator_id_fkey', 'groups', 'users', ['creator_id'], ['id'])
    op.drop_index(op.f('ix_groups_slug'), table_name='groups')
    op.drop_index(op.f('ix_groups_creator_id'), table_name='groups')
    op.drop_index(op.f('ix_groups_created_at'), table_name='groups')
    op.drop_index(op.f('ix_groups_category'), table_name='groups')
    op.alter_column('groups', 'creator_id',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='ID создателя',
               existing_nullable=True)
    op.alter_column('groups', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               comment=None,
               existing_comment='Дата создания',
               existing_nullable=True)
    op.alter_column('groups', 'category',
               existing_type=sa.VARCHAR(length=50),
               comment=None,
               existing_comment='Категория группы',
               existing_nullable=True)
    op.alter_column('groups', 'description',
               existing_type=sa.TEXT(),
               comment=None,
               existing_comment='Описание группы',
               existing_nullable=True)
    op.alter_column('groups', 'name',
               existing_type=sa.VARCHAR(length=100),
               nullable=True,
               comment=None,
               existing_comment='Название группы')
    op.alter_column('groups', 'id',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='Уникальный идентификатор',
               existing_nullable=False,
               autoincrement=True)
    op.drop_column('groups', 'member_count')
    op.drop_column('groups', 'tags')
    op.drop_column('groups', 'rules')
    op.drop_column('groups', 'banner_url')
    op.drop_column('groups', 'is_public')
    op.drop_column('groups', 'updated_at')
    op.drop_column('groups', 'slug')
    op.drop_constraint(None, 'group_members', type_='foreignkey')
    op.create_foreign_key('group_members_user_id_fkey', 'group_members', 'users', ['user_id'], ['id'])
    op.alter_column('group_members', 'user_id',
               existing_type=sa.INTEGER(),
               nullable=True,
               comment=None,
               existing_comment='ID пользователя')
    op.alter_column('group_members', 'group_id',
               existing_type=sa.INTEGER(),
               nullable=True,
               comment=None,
               existing_comment='ID группы')
    op.drop_column('group_members', 'is_banned')
    op.drop_column('group_members', 'role')
    op.drop_column('group_members', 'joined_at')
    op.create_table('users',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('username', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('email', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='users_pkey')
    )
    op.create_index('ix_users_username', 'users', ['username'], unique=True)
    op.create_index('ix_users_id', 'users', ['id'], unique=False)
    op.create_index('ix_users_email', 'users', ['email'], unique=True)
    op.drop_index(op.f('ix_users_cache_username'), table_name='users_cache')
    op.drop_index(op.f('ix_users_cache_id'), table_name='users_cache')
    op.drop_index(op.f('ix_users_cache_email'), table_name='users_cache')
    op.drop_table('users_cache')
    # ### end Alembic commands ###
