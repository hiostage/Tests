// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "Evans Trein",
            "url": "https://github.com/EvansTrein",
            "email": "evanstrein@icloud.com"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/data/u/{uuid}": {
            "get": {
                "description": "Searches for a user by id and returns it",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "data"
                ],
                "summary": "Get user info",
                "parameters": [
                    {
                        "type": "string",
                        "format": "uuid",
                        "example": "123e4567-e89b-12d3-a456-426614174000",
                        "description": "User UUID",
                        "name": "uuid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entity.User"
                        }
                    },
                    "400": {
                        "description": "Incorrect uuid format",
                        "schema": {
                            "$ref": "#/definitions/httpAdapter.BaseHandlerResponce"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/httpAdapter.BaseHandlerResponce"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/httpAdapter.BaseHandlerResponce"
                        }
                    },
                    "504": {
                        "description": "Gateway timeout",
                        "schema": {
                            "$ref": "#/definitions/httpAdapter.BaseHandlerResponce"
                        }
                    }
                }
            }
        },
        "/login": {
            "post": {
                "description": "User login, user search by mail, user session creation, session data embedded in cookies",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Login",
                "parameters": [
                    {
                        "description": "Login user request body",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.RegisterResponce"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/httpAdapter.BaseHandlerResponce"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/httpAdapter.BaseHandlerResponce"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/httpAdapter.BaseHandlerResponce"
                        }
                    },
                    "504": {
                        "description": "Gateway timeout",
                        "schema": {
                            "$ref": "#/definitions/httpAdapter.BaseHandlerResponce"
                        }
                    }
                }
            }
        },
        "/logout": {
            "post": {
                "security": [
                    {
                        "SessionAuth": []
                    }
                ],
                "description": "User logout and session deletion",
                "tags": [
                    "auth"
                ],
                "summary": "Logout",
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/httpAdapter.BaseHandlerResponce"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/httpAdapter.BaseHandlerResponce"
                        }
                    },
                    "504": {
                        "description": "Gateway timeout",
                        "schema": {
                            "$ref": "#/definitions/httpAdapter.BaseHandlerResponce"
                        }
                    }
                }
            }
        },
        "/register": {
            "post": {
                "description": "Register new user with provided data. All fields are required except \"phone\"",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Registration",
                "parameters": [
                    {
                        "description": "Register user request body",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.RegisterRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/dto.RegisterResponce"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/httpAdapter.BaseHandlerResponce"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/httpAdapter.BaseHandlerResponce"
                        }
                    },
                    "504": {
                        "description": "Gateway timeout",
                        "schema": {
                            "$ref": "#/definitions/httpAdapter.BaseHandlerResponce"
                        }
                    }
                }
            }
        },
        "/user": {
            "get": {
                "security": [
                    {
                        "SessionAuth": []
                    }
                ],
                "description": "Searches for a user by id (pulls it from the session load) and returns it",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Get user info",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entity.User"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/httpAdapter.BaseHandlerResponce"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/httpAdapter.BaseHandlerResponce"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/httpAdapter.BaseHandlerResponce"
                        }
                    },
                    "504": {
                        "description": "Gateway timeout",
                        "schema": {
                            "$ref": "#/definitions/httpAdapter.BaseHandlerResponce"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "SessionAuth": []
                    }
                ],
                "description": "Searches for a user by id (pulls it from the session load) and updates it",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Update user info",
                "parameters": [
                    {
                        "description": "ALL user data",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UpdateRequest"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/httpAdapter.BaseHandlerResponce"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/httpAdapter.BaseHandlerResponce"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/httpAdapter.BaseHandlerResponce"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/httpAdapter.BaseHandlerResponce"
                        }
                    },
                    "504": {
                        "description": "Gateway timeout",
                        "schema": {
                            "$ref": "#/definitions/httpAdapter.BaseHandlerResponce"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "SessionAuth": []
                    }
                ],
                "description": "Searches for a user by id (takes it from the session load) and deletes it and its session",
                "tags": [
                    "user"
                ],
                "summary": "Delete user",
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/httpAdapter.BaseHandlerResponce"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/httpAdapter.BaseHandlerResponce"
                        }
                    },
                    "504": {
                        "description": "Gateway timeout",
                        "schema": {
                            "$ref": "#/definitions/httpAdapter.BaseHandlerResponce"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "dto.LoginRequest": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string",
                    "maxLength": 20,
                    "minLength": 8
                }
            }
        },
        "dto.RegisterRequest": {
            "type": "object",
            "required": [
                "email",
                "firstName",
                "lastName",
                "password",
                "phone"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "firstName": {
                    "type": "string",
                    "minLength": 2
                },
                "lastName": {
                    "type": "string",
                    "minLength": 2
                },
                "password": {
                    "type": "string",
                    "maxLength": 20,
                    "minLength": 8
                },
                "phone": {
                    "type": "string"
                }
            }
        },
        "dto.RegisterResponce": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                }
            }
        },
        "dto.UpdateRequest": {
            "type": "object",
            "required": [
                "email",
                "firstName",
                "lastName",
                "password",
                "phone"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "firstName": {
                    "type": "string",
                    "minLength": 2
                },
                "lastName": {
                    "type": "string",
                    "minLength": 2
                },
                "password": {
                    "type": "string",
                    "maxLength": 20,
                    "minLength": 8
                },
                "phone": {
                    "type": "string"
                }
            }
        },
        "entity.User": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "firstName": {
                    "type": "string"
                },
                "lastName": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                },
                "roles": {
                    "description": "TODO: на данный момент ролей нет в БД, они вообще не определены",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "userName": {
                    "type": "string"
                },
                "uuid": {
                    "type": "string"
                }
            }
        },
        "httpAdapter.BaseHandlerResponce": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "status": {
                    "type": "integer"
                }
            }
        }
    },
    "securityDefinitions": {
        "SessionAuth": {
            "type": "apiKey",
            "name": "session_id",
            "in": "cookie"
        }
    },
    "externalDocs": {
        "description": "OpenAPI",
        "url": "https://swagger.io/resources/open-api/"
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "0.2",
	Host:             "localhost:8010",
	BasePath:         "",
	Schemes:          []string{"http"},
	Title:            "Registration and authorisation services",
	Description:      "The service allows you to create a user, edit, delete\nYou can log in and log out and sessions will be created and deleted",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
