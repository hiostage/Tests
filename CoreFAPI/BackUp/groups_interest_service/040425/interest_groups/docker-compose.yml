version: '3.8'

services:
  app:
    build: .
    restart: unless-stopped
    ports:
      - "8000:8000"
    volumes:
      - ./:/app
    env_file:
      - .env
    environment:
      - PYTHONPATH=/app
      - DB_HOST=db
      - REDIS_HOST=redis
      - RABBITMQ_HOST=rabbitmq
      - AUTH_PROXY_URL=${AUTH_PROXY_URL}  # Добавляем ссылку на auth-proxy
      - AUTH_PROXY_TOKEN=${AUTH_PROXY_TOKEN}  # Токен для работы с auth-proxy
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      auth-proxy:  # Зависимость от auth-proxy
        condition: service_healthy
    networks:
      - backend
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  db:
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - backend

  redis:
    image: redis:7-alpine
    command: redis-server --save 60 1 --loglevel warning
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
    networks:
      - backend

  rabbitmq:
    image: rabbitmq:3.12-management
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASS}
      RABBITMQ_DEFAULT_VHOST: ${RABBITMQ_VHOST}
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "status"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - backend

  auth-proxy:
    build:
      context: ../mock_auth
    environment:
      AUTH_PROXY_TOKENS: "Bearer ${AUTH_PROXY_TOKEN},Bearer test-token"  # Используем переменную
    networks:
      - backend
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/health || exit 1"]
      start_period: 30s
      interval: 10s
      timeout: 10s
      retries: 3
    restart: unless-stopped


volumes:
  postgres_data:
  redis_data:
  rabbitmq_data:

networks:
  backend:
    driver: bridge
